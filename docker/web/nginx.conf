# Primary site config
server {
    listen 44232 ssl http2;
    listen [::]:44232 ssl http2;

    # Site config
    server_name _;
    root /opt/project/public;

    # SSL
    ssl_certificate /etc/letsencrypt/live/www.stmarkreformed.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/www.stmarkreformed.com/privkey.pem;
    ssl_protocols TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:!EECDH+3DES:!RSA+3DES:!MD5;
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;
    ssl_session_cache shared:SSL:5m;
    ssl_session_timeout 1h;
    add_header Strict-Transport-Security "max-age=15768000; includeSubDomains" always;
    ssl_stapling on;
    ssl_stapling_verify on;

    # Indexes
    index index.php index.html index.htm;

    # Charset
    charset utf-8;

    # Server effeciency
    location = /favicon.ico {
        access_log off;
        log_not_found off;
    }
    access_log off;
    error_log  /var/log/nginx/error.log;

    # Errors
    # error_page 404 /404.html;
    recursive_error_pages off;
    error_page 404 /index.php;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }

    # Serve PHP
    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass stmark-php:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;

        fastcgi_buffers 8 16k;
        fastcgi_buffer_size 32k;
        fastcgi_read_timeout 240;
        proxy_connect_timeout 10;
        proxy_send_timeout 300;
        proxy_read_timeout 300;
    }





    ############################
    # Custom Config
    ############################

    # Allow large file uploads
    client_max_body_size 500m;

    # Enable Gzip
    gzip on;
    gzip_comp_level 2;
    gzip_min_length 1000;
    gzip_vary on;
    gzip_proxied any;
    gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;

    # Cache Media: images, icons, video, audio, HTC, css, js, fonts - 1 month
    location ~ \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc|css|js|woff|woff2|ttf|eot)$ {
        expires 1M;
        add_header Pragma "public";
        add_header Cache-Control "max-age=2592000, public, must-revalidate, proxy-revalidate";
        log_not_found off;
        access_log off;
    }

    # Set cache path
    set $cachePath $document_root/cache$request_uri/index.html;
    set $cacheServe /cache$request_uri/index.html;
    if ($request_uri = /) {
        set $cachePath $document_root/cache/index.html;
        set $cacheServe /cache/index.html;
    }

    # Static Cache checks
    set $cache false;

    # Disallow direct access of cache directory
    location /cache {
        internal;
    }

    # Only serve static cache if the cache file exists
    if (-f $cachePath) {
        set $cache true;
    }

    # Don't serve static cache if not GET request
    if ($request_method != GET) {
        set $cache false;
    }

    location ^~ /sermons {
        # Serve through index.php
        try_files $uri $uri/ /index.php?$query_string;

        # Remove index.php from URL
        rewrite ^(/index\.php)(.*) $2 permanent;
    }

    # Everywhere except LetsEncrypt Verification
    location ~ ^((?!.well-known\/acme-challenge\/).)*$ {
        # If static cache is enabled, do that!
        if ($cache = true) {
            rewrite ^(.*)$ $cacheServe break;
        }

        # We don't need the rest of these rules if the file or directory exists
        if (-f $request_filename) {
            break;
        }
        if (-d $request_filename) {
            break;
        }

        # Remove multiple slashes
        if ($request_uri ~ "^[^?]*?//") {
            rewrite "^" $scheme://$host$uri permanent;
        }

        # Remove index.php from URL
        rewrite ^(/index\.php)(.*) $2 permanent;

        # Remove trailing slashes
        rewrite ^/(.*)/$ /$1 permanent;

        # Serve through index.php
        try_files $uri $uri/ /index.php?$query_string;
    }

    # Remove index.php from root URI
    if ($request_uri ~* "^/index\.php$") {
        return 301 /;
    }
}
