name: CI
on: [push]
jobs:
  build:
    name: Build images, run tests, and push to registry
    runs-on: ubuntu-latest
    steps:
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.CI_SLACK_WEBHOOK }}
          SLACK_USERNAME: Github
          SLACK_ICON: https://www.buzzingpixel.com/files/slack-notifications-icon.png
          SLACK_COLOR: '#1B7FBA'
          SLACK_TITLE: ':large_blue_circle: stmarkreformed.com CI has started'
          SLACK_FOOTER: '<https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|View Run>'

      - name: Checkout
        uses: actions/checkout@v2

      - name: Create buildx context
        run: docker buildx create --use

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin

      - name: Build app image
        run: >
          docker buildx build
          --platform=linux/amd64
          --file docker/application/Dockerfile
          --cache-from ghcr.io/st-mark-reformed/stmarkreformed.com-app
          --build-arg BUILDKIT_INLINE_CACHE=1
          --tag ghcr.io/st-mark-reformed/stmarkreformed.com-app
          --tag ghcr.io/st-mark-reformed/stmarkreformed.com-app:"$GITHUB_SHA"
          --output type=docker
          .

      - name: Build database image
        run: >
          docker buildx build
          --platform=linux/amd64
          --file docker/db/Dockerfile
          --cache-from ghcr.io/st-mark-reformed/stmarkreformed.com-db
          --build-arg BUILDKIT_INLINE_CACHE=1
          --tag ghcr.io/st-mark-reformed/stmarkreformed.com-db
          --tag ghcr.io/st-mark-reformed/stmarkreformed.com-db:"$GITHUB_SHA"
          --output type=docker
          .

      - name: Create code quality container
        run: >
          docker run -d
          --name stmark-code-quality
          -w /opt/project
          --env ENABLE_PHP_DEV_CONFIG=1
          --env ENABLE_XDEBUG=1
          --env DISABLE_PHP_FPM=1
          --env DISABLE_NGINX=1
          ghcr.io/st-mark-reformed/stmarkreformed.com-app:"$GITHUB_SHA"

      - name: Install All Composer Dependencies
        run: docker exec stmark-code-quality bash -c "composer install --no-interaction --no-progress"

      - name: Run PHPUnit
        run: docker exec stmark-code-quality bash -c "XDEBUG_MODE=coverage ./vendor/bin/phpunit"

      - name: Run PHPStan
        run: docker exec stmark-code-quality bash -c "XDEBUG_MODE=off php -d memory_limit=4G ./vendor/bin/phpstan analyse CraftFrontController.php public/index.php config src --no-progress"

      - name: Run PHPCS
        run: docker exec stmark-code-quality bash -c "XDEBUG_MODE=off php -d memory_limit=4G ./vendor/bin/phpcs"

      - name: Run php-cs-fixer
        run: docker exec stmark-code-quality bash -c "XDEBUG_MODE=off ./vendor/bin/php-cs-fixer fix -v --using-cache=no"

      - name: Install node dependencies
        run: docker run --name stmark-node-code-quality -v ${PWD}:/app -w /app node:16.10.0 bash -c "yarn" && docker rm -f stmark-node-code-quality &>/dev/null

      - name: Run eslint
        run: docker run --name stmark-node-code-quality -v ${PWD}:/app -w /app node:16.10.0 bash -c 'yarn eslint --ext .js --ext .ts --ext .jsx --ext .tsx --ext .html --ext .vue --ext .mjs --ext .twig --no-error-on-unmatched-pattern assets src' && docker rm -f stmark-node-code-quality &>/dev/null

      - name: Run stylelint
        run: docker run --name stmark-node-code-quality -v ${PWD}:/app -w /app node:16.10.0 bash -c 'yarn stylelint --allow-empty-input "assets/**/*.{css,pcss,html,twig}" "src/**/*.{css,pcss,html,twig}"' && docker rm -f stmark-node-code-quality &>/dev/null

      - name: Push app image
        if: contains(github.ref, 'master')
        run: docker push ghcr.io/st-mark-reformed/stmarkreformed.com-app

      - name: Push db image latest tag
        if: contains(github.ref, 'master')
        run: docker push ghcr.io/st-mark-reformed/stmarkreformed.com-db

      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        if: failure()
        env:
          SLACK_WEBHOOK: ${{ secrets.CI_SLACK_WEBHOOK }}
          SLACK_USERNAME: Github
          SLACK_ICON: https://www.buzzingpixel.com/files/slack-notifications-icon.png
          SLACK_COLOR: '#A94442'
          SLACK_TITLE: ':red_circle: stmarkreformed.com CI failed'
          SLACK_FOOTER: '<https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|View Run>'

      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        if: success()
        env:
          SLACK_WEBHOOK: ${{ secrets.CI_SLACK_WEBHOOK }}
          SLACK_USERNAME: Github
          SLACK_ICON: https://www.buzzingpixel.com/files/slack-notifications-icon.png
          SLACK_COLOR: '#3B763D'
          SLACK_TITLE: ':large_green_circle: stmarkreformed.com CI passed'
          SLACK_FOOTER: '<https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|View Run>'

  deploy:
    name: Deploy to production
    runs-on: ubuntu-latest
    needs: build
    if: contains(github.ref, 'master')
    steps:
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.CI_SLACK_WEBHOOK }}
          SLACK_USERNAME: Github
          SLACK_ICON: https://www.buzzingpixel.com/files/slack-notifications-icon.png
          SLACK_COLOR: '#1B7FBA'
          SLACK_TITLE: ':large_blue_circle: stmarkreformed.com production deployment has started'
          SLACK_FOOTER: '<https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|View Run>'

      - name: Log in to production server and run commands
        uses: appleboy/ssh-action@master
        with:
          username: ${{ secrets.PROD_DEPLOY_SSH_USER }}
          host: ${{ secrets.PROD_DEPLOY_SSH_HOST }}
          key: ${{ secrets.PROD_DEPLOY_SSH_PRIVATE_KEY }}
          script: |
            # Log in to github docker registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin;

            # Pull latest images
            docker pull ghcr.io/st-mark-reformed/stmarkreformed.com-app;
            docker pull ghcr.io/st-mark-reformed/stmarkreformed.com-db;

            # Disable scheduler and queue runners
            cd /root/stmarkreformed.com;
            echo "" > /root/stmarkreformed.com/disableSchedule;
            ./dev supervisor-stop-queue

            # Copy files
            docker run --entrypoint "" --name tmp ghcr.io/st-mark-reformed/stmarkreformed.com-app /bin/true;
            mkdir -p /root/stmarkreformed.com/docker/utility;
            docker cp tmp:/opt/project/docker/utility/prod.sh /root/stmarkreformed.com/docker/utility/prod.sh;
            docker cp tmp:/opt/project/.env /root/stmarkreformed.com/.env;
            docker cp tmp:/opt/project/docker-compose.prod.yml /root/stmarkreformed.com/docker-compose.prod.yml;
            docker cp tmp:/opt/project/docker-compose.yml /root/stmarkreformed.com/docker-compose.yml;
            docker cp tmp:/opt/project/queueRunner.sh /root/stmarkreformed.com/queueRunner.sh;
            chmod +x /root/stmarkreformed.com/queueRunner.sh;
            docker cp tmp:/opt/project/scheduleRunner.sh /root/stmarkreformed.com/scheduleRunner.sh;
            chmod +x /root/stmarkreformed.com/scheduleRunner.sh;
            docker rm tmp;
            cat /root/stmarkreformed.com/.env.local >> /root/stmarkreformed.com/.env

            # Stop old containers
            cd /root/stmarkreformed.com;
            docker kill stmark-utility;
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml -p stmark down || printf "\n";
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml -p stmark kill || printf "\n";

            # Start new containers from new images
            cd /root/stmarkreformed.com;
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml -p stmark up -d --remove-orphans --no-color;

            # Restart the proxy server
            cd /root/nginx-master;
            docker kill certbot-master;
            docker-compose down;
            docker-compose up -d;

            # Run after scripts
            cd /root/stmarkreformed.com;
            ./dev container-app php craft project-config/apply --interactive=0;
            ./dev container-app php craft migrate/all --interactive=0;
            ./dev container-app php craft cache/flush-all --interactive=0;
            ./dev container-app php craft clear-caches/compiled-templates --interactive=0;
            ./dev container-app php craft clear-caches/data --interactive=0;
            ./dev container-app php craft clear-caches/static-caches --interactive=0;

            # Enable scheduler and queue runners
            cd /root/stmarkreformed.com;
            rm /root/stmarkreformed.com/disableSchedule;
            ./dev supervisor-start-queue;

      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        if: failure()
        env:
          SLACK_WEBHOOK: ${{ secrets.CI_SLACK_WEBHOOK }}
          SLACK_USERNAME: Github
          SLACK_ICON: https://www.buzzingpixel.com/files/slack-notifications-icon.png
          SLACK_COLOR: '#A94442'
          SLACK_TITLE: ':red_circle: stmarkreformed.com production deployment has failed'
          SLACK_FOOTER: '<https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|View Run>'

      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        if: success()
        env:
          SLACK_WEBHOOK: ${{ secrets.CI_SLACK_WEBHOOK }}
          SLACK_USERNAME: Github
          SLACK_ICON: https://www.buzzingpixel.com/files/slack-notifications-icon.png
          SLACK_COLOR: '#3B763D'
          SLACK_TITLE: ':large_green_circle: stmarkreformed.com production deployment succeeded'
          SLACK_FOOTER: '<https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|View Run>'
